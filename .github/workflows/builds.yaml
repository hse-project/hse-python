name: Builds

on:
  push:
    branches:
      - master
      - v*.*
    paths-ignore:
      - "**.md"
      - .coveragerc
      - .gitignore
      - .shellcheckrc
      - LICENSE
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "**.md"
      - .coveragerc
      - .gitignore
      - .shellcheckrc
      - LICENSE

env:
  MESON_TESTTHREADS: 1

jobs:
  ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        buildtype: [release, debug]

    steps:
      - uses: actions/checkout@v3

      - name: Initialize
        run: |
          sudo apt-get update
          sudo apt-get install build-essential ninja-build pkg-config \
            libbsd-dev libmicrohttpd-dev liburcu-dev libyaml-dev liblz4-dev \
            libcurl4-openssl-dev python3-dev
          sudo python3 -m pip install meson Cython

      - name: Setup
        run: |
          meson builddir -Dbuildtype=${{ matrix.buildtype }} -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-artifact-${{ matrix.os }}-${{ matrix.buildtype }}
          path: builddir/meson-logs/

  fedora:
    runs-on: ubuntu-latest
    container:
      image: fedora:${{ matrix.image-tag }}
    strategy:
      fail-fast: false
      matrix:
        image-tag: [35]
        buildtype: [release, debug]

    steps:
      - uses: actions/checkout@v3

      - name: Initialize
        run: |
          dnf group install -y --with-optional \
            "C Development Tools and Libraries"
          sudo dnf install -y git ninja-build meson pkg-config \
            libmicrohttpd-devel userspace-rcu-devel libyaml-devel \
            lz4-devel libbsd-devel libcurl-devel libxml2-devel libxslt-devel \
            python3-devel python3-Cython

      - name: Setup
        run: |
          meson builddir -Dbuildtype=${{ matrix.buildtype }} -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-artifact-${{ github.job }}-${{ matrix.image-tag }}-${{ matrix.buildtype }}
          path: builddir/meson-logs/

  almalinux:
    runs-on: ubuntu-latest
    container:
      image: almalinux:${{ matrix.image-tag }}
    strategy:
      fail-fast: false
      matrix:
        image-tag: [8]
        buildtype: [release, debug]

    steps:
      - uses: actions/checkout@v3

      - name: Initialize
        run: |
          dnf install -y sudo dnf-plugins-core epel-release
          dnf config-manager --set-enabled powertools
          dnf group install -y --with-optional "Development Tools"
          dnf install -y git ninja-build libmicrohttpd-devel \
            userspace-rcu-devel libyaml-devel lz4-devel libbsd-devel \
            libcurl-devel libxml2 libxslt python36 python36-devel
          python3 -m pip install meson Cython

      - name: Setup
        run: |
          meson builddir -Dbuildtype=${{ matrix.buildtype }} -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-artifact-${{ github.job }}-${{ matrix.image-tag }}-${{ matrix.buildtype }}
          path: builddir/meson-logs/

  architectures:
    runs-on: ubuntu-latest
    container:
      image: debian:11
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, debug]
        arch: [s390x]

    steps:
      - name: Checkout hse-python
        uses: actions/checkout@v3

      - name: Checkout HSE
        uses: actions/checkout@v3
        with:
          repository: hse-project/hse
          path: subprojects/hse
          ref: ${{ github.base_ref || github.ref }}

      - name: Post-checkout
        run: |
          git -C subprojects/hse checkout ${{ github.head_ref }} || true

      - name: Initialize
        run: |
          dpkg --add-architecture ${{ matrix.arch }}
          apt-get -y update
          apt-get -y install python3 python3-pip pkg-config ninja-build \
            build-essential crossbuild-essential-${{ matrix.arch }} \
            libpython3-dev:${{ matrix.arch }} liburcu-dev:${{ matrix.arch }} \
            libcurl4-openssl-dev:${{ matrix.arch }} \
            libbsd-dev:${{ matrix.arch }} libmicrohttpd-dev:${{ matrix.arch }} \
            libyaml-dev:${{ matrix.arch }}
          python3 -m pip install meson Cython

      - name: Setup
        run: |
          meson builddir --cross-file cross/${{ matrix.arch }}.ini \
            --cross-file cross/common.ini -Dbuildtype=${{ matrix.buildtype }} \
            -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/
